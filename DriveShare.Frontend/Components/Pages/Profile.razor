@page "/profile"
@inject SessionStateService SessionState
@inject ApiClientService ApiClient
@inject NavigationManager NavigationManager
@using DriveShare.Frontend.Models
@using DriveShare.Frontend.Models.DTOs

<h3>User Profile</h3>

@if (!SessionState.IsUserLoggedIn())
{
    <p>Not Found</p>
}
else
{
    <p><strong>User Info:</strong></p>
    <div>
        <p><strong>Firstname:</strong> @user?.Firstname</p>
        <p><strong>Lastname:</strong> @user?.Lastname</p>
        <p><strong>Email:</strong> @user?.Email</p>
    </div>

    @if (balance.HasValue)
    {
        <p><strong>Balance:</strong> $@balance</p>
    }
    else
    {
        <p>Loading balance...</p>
    }
}

@code {
    private BNUser? user;
    private decimal? balance;

    // On initialization, make the API calls
    protected override async Task OnInitializedAsync()
    {
        // Check if the user is logged in
        if (!SessionState.IsUserLoggedIn())
        {
            // Redirect to the login page if not logged in
            NavigationManager.NavigateTo("/login");
            return;
        }

        // Fetch user details
        var userId = SessionState.UserId;
        if (userId != null)
        {
            try
            {
                // Fetch user data
                user = await ApiClient.GetAsync<BNUser>($"/users/{userId}");

                // Fetch user balance
                var result = await ApiClient.GetAsync<BalanceResponse>($"/users/balance");

                if (result != null)
                {
                    balance = result.Balance;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching user data: {ex.Message}");
                // Handle error (e.g., show an error message to the user)
            }
        }
    }
}
