@page "/bookings"
@inject SessionStateService SessionState
@inject ApiClientService ApiClient
@rendermode InteractiveServer
@using DriveShare.Frontend.Models
@using DriveShare.Frontend.Models.DTOs

<h3>My Bookings</h3>

@if (bookings != null)
{
    <div class="row">
        @foreach (var booking in bookings)
        {
            <div class="col-md-4">
                <div class="card">
                    <img src="https://via.placeholder.com/150" class="card-img-top" alt="Car image" />
                    <div class="card-body">
                        <h5 class="card-title">@booking.Car.Model</h5>
                         <p class="card-text">ID: @booking.Id</p>
                        <p class="card-text">Year: @booking.Car.Year</p>
                        <p class="card-text">Mileage: @booking.Car.Mileage</p>
                        <p class="card-text">Location: @booking.Car.Location</p>
                        <p class="card-text">Price per day: $@booking.Car.PricePerDay</p>
                        <p class="card-text">Availability: @booking.Car.Availability</p>
                        <p class="card-text">Pick Up Location: @booking.Car.PickUpLocation</p>
                        <p class="card-text">Start Date: @booking.StartDate.ToString("MMMM dd, yyyy")</p>
                        <p class="card-text">End Date: @booking.EndDate.ToString("MMMM dd, yyyy")</p>
                        <p class="card-text">Total Price: $@booking.TotalPrice</p>
                        <p class="card-text">Status: @booking.Status</p>
                        <p class="card-text">Renter: @booking.Renter.Email</p>
                        <p class="card-text">Owner: @booking.Owner.Email</p>
                        @* <button class="btn btn-primary" @onclick="() => ViewBookingDetails(booking.Id)">View Details</button> *@
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>Loading bookings...</p>
}

@code {
    private List<Booking> bookings;

    protected override async Task OnInitializedAsync()
    {
        // Fetch car listings from the API
        if (SessionState.IsUserLoggedIn())
        {
            try
            {
                bookings = await ApiClient.GetAsync<List<Booking>>("/bookings/mine");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching bookings: {ex.Message}");
                bookings = new List<Booking>();
            }
        }
    }

    private async void BookCar(CarListing car)
    {
        // Handle the booking logic here (could be a redirect to a booking page)
        Console.WriteLine($"Booking car with ID: {car.Id}");
        Console.WriteLine($"Seller ID: {car.Seller.Id}");

        // create new booking request
        var bookingRequest = new BookCarRequest
        {
            ListingId = car.Id,
            OwnerId = car.Seller.Id,
            StartDate = DateTime.Now,
            EndDate = DateTime.Now.AddDays(7)
        };

        var result = await ApiClient.PostAsync<Booking>("/bookings/bookcar", bookingRequest);

    }

    private string GetGreeting()
    {
        // If the user is logged in, display their UserId
        if (SessionState.IsUserLoggedIn())
        {
            return SessionState.UserId ?? "User";
        }
        else
        {
            return "world";
        }
    }
}
